#!/usr/bin/env python3
"""
Demonstration script for the URDF generation system.
Shows how to use the generated URDFs and validate them.
"""

import os
import sys
import glob
from generate_assets import URDFGenerator
from validate_urdf import URDFValidator

def demonstrate_system():
    """Demonstrate the complete URDF generation and validation system."""
    print("ü§ñ GASM-Roboting URDF Asset System Demonstration")
    print("=" * 60)
    
    # Initialize components
    generator = URDFGenerator()
    validator = URDFValidator()
    
    print("\nüìÅ Directory Structure:")
    for root, dirs, files in os.walk("assets"):
        level = root.replace("assets", "").count(os.sep)
        indent = " " * 2 * level
        print(f"{indent}{os.path.basename(root)}/")
        sub_indent = " " * 2 * (level + 1)
        for file in files:
            print(f"{sub_indent}{file}")
    
    print("\nüîß Generated URDF Files:")
    urdf_files = glob.glob("assets/urdf/*.urdf")
    for i, urdf_file in enumerate(urdf_files, 1):
        print(f"  {i:2d}. {os.path.basename(urdf_file)}")
        
        # Quick validation
        is_valid = validator.validate_file(urdf_file)
        status = "‚úÖ VALID" if is_valid else "‚ùå INVALID"
        print(f"      {status}")
        
        if not is_valid and validator.errors:
            print(f"      Errors: {len(validator.errors)}")
    
    print(f"\nüìä Generation Statistics:")
    print(f"  Total URDF files: {len(urdf_files)}")
    
    # Count by type
    conveyor_files = [f for f in urdf_files if 'conveyor' in f]
    sensor_files = [f for f in urdf_files if 'sensor' in f]
    
    print(f"  Conveyor variants: {len(conveyor_files)}")
    print(f"  Sensor variants: {len(sensor_files)}")
    
    print(f"\nüéØ Key Features Demonstrated:")
    print("  ‚úÖ Procedural URDF generation")
    print("  ‚úÖ Multiple object variants (sizes)")
    print("  ‚úÖ Proper physics properties (mass, inertia)")
    print("  ‚úÖ Material definitions with friction")
    print("  ‚úÖ Joint definitions with limits")
    print("  ‚úÖ Collision and visual geometry")
    print("  ‚úÖ URDF validation and correctness checking")
    print("  ‚úÖ Structured configuration system")
    
    print(f"\nüîç Sample URDF Content (Conveyor Base Link):")
    try:
        with open("assets/urdf/conveyor.urdf", 'r') as f:
            lines = f.readlines()
            # Show first 20 lines to demonstrate structure
            for i, line in enumerate(lines[:20], 1):
                print(f"  {i:2d}: {line.rstrip()}")
            if len(lines) > 20:
                print(f"  ... ({len(lines) - 20} more lines)")
    except FileNotFoundError:
        print("  Conveyor URDF not found")
    
    print(f"\nüõ†Ô∏è  Usage Examples:")
    print("  # Generate all assets:")
    print("  python3 scripts/generate_assets.py --object all --variants")
    print()
    print("  # Validate specific URDF:")
    print("  python3 scripts/validate_urdf.py assets/urdf/conveyor.urdf")
    print()
    print("  # Test PyBullet compatibility:")
    print("  python3 scripts/test_pybullet_compatibility.py")
    print()
    print("  # Generate only conveyor variants:")
    print("  python3 scripts/generate_assets.py --object conveyor --variants")
    
    print(f"\nüìã Configuration System:")
    print("  Config file: assets/configs/simulation_params.yaml")
    print("  Features:")
    print("    ‚Ä¢ Material properties (friction, restitution, density)")
    print("    ‚Ä¢ Physics parameters (gravity, solver settings)")
    print("    ‚Ä¢ Size variants and color options")
    print("    ‚Ä¢ Validation rules and limits")
    print("    ‚Ä¢ Export format support")
    
    print(f"\nüéÆ PyBullet Integration:")
    print("  All generated URDFs are designed for immediate PyBullet use:")
    print("  ```python")
    print("  import pybullet as p")
    print("  physics_client = p.connect(p.GUI)")
    print("  robot_id = p.loadURDF('assets/urdf/conveyor.urdf')")
    print("  # ... simulation code ...")
    print("  ```")
    
    print(f"\n‚ú® System Ready!")
    print("  All URDF files have been generated and validated.")
    print("  The asset generation system is fully functional.")

if __name__ == '__main__':
    demonstrate_system()